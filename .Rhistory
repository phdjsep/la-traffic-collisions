?sf
la_geojson
library(rgdal)
library(spdplyr)
library(geojsonio)
library(rmapshaper)
sf::as_Spatial(traffic$location_1)
sf::st_transform(traffic$location_1)
library(sp)
SpatialPoints(traffic$location_1)
st_as_sf(traffic, location_1)
st_as_sf(traffic, "location_1")
plot(la_geojson)
plot(la_geojson$Name)
plot(la_geojson$Zip_Num)
plot(la_geojson)
plot(st_geometry(la_geojson))
traffic
head(traffic$location_1)
install.packages('wellknown')
library(wellknown)
wellknown::wkt2geojson(traffic$location_1)
wellknown::wkt2geojson(traffic[1,]$location_1)
traffic[1,]$location_1
test <- traffic[1,]$location_1
wellknown::wkt2geojson(test)
str <- "POINT (-116.4000000000000057 45.2000000000000028)"
wkt2geojson(str)
detach(wellknown)
detach("package:wellknown", unload = TRUE)
remove.packages("wellknown")
sf::st_linestring(test)
test
sf::st_as_sfc(test)
sf::st_as_sfc(traffic$location_1)
traffic
traffic$location_geo <- sf::st_as_sfc(traffic$location_1)
traffic
plot(head(traffic$location_geo))
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addMarkers(~location_geo)
traffic
?addMarkers
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addGeoJSON(~location_geo)
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addGeoJSON(geojson = location_geo)
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addGeoJSON(geojson = traffic$location_geo)
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addGeoJSON(geojson = head(traffic$location_geo))
leaflet(data = traffic[1:20,]) %>% addTiles() %>% addGeoJSON(geojson = "la_county.geojson")
?st_as_sfc
plot(st_geometry(traffic$location_geo))
plot(st_geometry(la_geojson))
zip_postal_cities <- readxl::read_xlsx("zipcodexxpostalcities-201406.xlsx")
zip_postal_cities
zip_postal_cities <- zip_postal_cities %>% clean_names()
zip_postal_cities
filter(zip_postal_cities, zip_num == 90027)
install.packages('rgeos')
install.packages("rgeos")
library(RSocrata)
library(janitor)
library(tidyverse)
library(lubridate)
install.packages("rgdal")
install.packages("spdplyr")
install.packages("geojsonio")
install.packages("rmapshaper")
library(rgdal)
library(geojsonio)
library(rmapshaper)
library(sf)
rgeos::readWKT(traffic[1,]$location_1)
rgeos::readWKT(traffic[1,]$location_1)$x
la_geojson
readOGR("CAMS_ZIPCODE_STREET_SPECIFIC/", stringsAsFactors = F)
tmp <- readOGR("CAMS_ZIPCODE_STREET_SPECIFIC/", stringsAsFactors = F)
tmp@data
plot(tmp, col = 'lightgrey', axes = T)
?readOGR
plot(la_county, col = 'lightgrey', axes = T)
la_county_json
la_county_json %>% as_tibble()
la_county_json %>% as.data.frame()
la_county_json_simplified
la_geojson
la_county
la_geojson
proj4string(la_county)
proj4string(traffic)
as.data.frame(traffic)
as.data.frame(traffic) %>% proj4string()
?proj4string
traffic
traffic %>% select(location_1, location_geo)
la_geojson
sf::st_transform(la_geojson$geometry)
sf::st_transform(la_geojson$geometry, 2163)
traffic
traffic <- read.socrata("https://data.lacity.org/resource/k8cc-2d49.csv") %>%
as_tibble() %>%
clean_names() %>%
select(-crm_cd:-crm_cd_desc, -location_1_address:-location_1_zip) %>%
mutate(cross_street = str_squish(cross_street),
location = str_squish(location),
location_latlong = str_extract(location_1, "(?<=\\().*?(?=\\))"),
time_occ = hm(time_occ/100),
occ_to_rpt = difftime(date_rptd, date_occ, units = 'days'),
vict_age = ifelse(vict_age == 99, NA, vict_age),
vict_sex = ifelse(vict_sex %in% c("", "H", "N"), "X", vict_sex)) %>%
separate(location_latlong, c("long", "lat"), sep = " ") %>%
mutate(long = as.double(long), lat = as.double(lat)) %>%
filter(long != 0) %>%
write_rds("traffic.rds", compress = "gz")
# convert 'well-known text' (WKT) format to POINT object
traffic <- read_rds("traffic.rds")
traffic$location_geo <- sf::st_as_sfc(traffic$location_1)
traffic
traffic %>% distinct(area_name)
traffic %>% distinct(area_name) %>% View()
la_county
library(ggmap)
revgeocode(traffic$location_1, output="more")
as.numeric(geocode("the hollyood bowl"))
register_google(key = token)
as.numeric(geocode("the hollyood bowl"))
register_google(key = "AIzaSyB201lwYuF0EZfFH_i4KWAJOp9f4qiaZ_w")
as.numeric(geocode("the hollyood bowl"))
traffic$location_geo
SpatialPoints(traffic$location_geo)
SpatialPoints(traffic$location_1)
SpatialPoints(traffic$long, traffic$lat)
?SpatialPoints
tf <- as.data.frame(traffic)
tf
SpatialPoints(traffic[, "location_geo"])
SpatialPoints(traffic[, c("long", "lat")])
tf_points <- SpatialPoints(traffic[, c("long", "lat")])
sp::over(tf_points, la_county)
sp::over(tf_points, la_county@data)
tf_points
tf_points %>% as_tibble()
remove(tf_points)
tf
install.packages("leaflet")
la_county
la_county
la_county@data
la_geojson
ggplot() + geom_sf(data = la_county, size = 3, color = 'black', fill = 'cyan1') + coord_sf()
st_read(traffic$location_1)
st_read(traffic$location_geo)
tf
st_read(tf[, "location_geo"])
st_read(tf[, "location_1"])
st_read(tf[, "location_geo"])
st_read("CAMS_ZIPCODE_STREET_SPECIFIC/CAMS_ZIPCODE_STREET_SPECIFIC.shp")
la_county_shp <- st_read("CAMS_ZIPCODE_STREET_SPECIFIC/CAMS_ZIPCODE_STREET_SPECIFIC.shp")
ggplot() + geom_sf(data = la_county_shp, size = 3, color = 'black', fill = 'cyan1') + coord_sf()
la_county_shp
la_county
la_county_shp
la_geojson
?st_read
plot(la_county_shp, col="cyan1", border="black", lwd=3,
main="AOI Boundary Plot")
la_county
ggplot() + geom_polygon(data = la_county, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
ggplot() + geom_polygon(data = la_county_shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
ggplot() + geom_polygon(data = la_county, aes(x = long, y = lat, group = group), colour = "black", fill = NA) + theme_void()
la_county
la_county@data
la_county@polygons
la_county@bbox
la_county@proj4string
library(broom)
broom::tidy(la_county, region = "NAME")
broom::tidy(la_county, region = "Name")
la_county_tidy <- broom::tidy(la_county, region = "Name")
warnings()
la_county_tidy
aggregate(cbind(long, lat) ~ id, data = la_county_tidy, FUN = mean)
la_zip_names <- aggregate(cbind(long, lat) ~ id, data = la_county_tidy, FUN = mean)
ggplot() +
geom_polygon(data = la_county, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void() +
geom_text(data = la_zip_names, aes(x = long, y = lat, label = id), size = 4) + theme_void()
# convert shapefile to geoJSON for reverse geocoding
# install.packages("rgdal")
install.packages("spdplyr")
library(spdplyr)
?spdplyr
spdplyr::show(la_county)
spdplyr::show(la_county) %>% filter(Name == 90704)
la_county %>% filter(Name == 90704)
la_county_test <- la_county %>% filter(Name != 90704)
ggplot() +
geom_polygon(data = la_county_test, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void()
traffic
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE)
# remove islands
la_county_sans_islands <- la_county %>% filter(Name != 90704)
la_county_sans_islands_tidy <- broom::tidy(la_county_sans_islands, region = "Name")
la_zip_names <- aggregate(cbind(long, lat) ~ id, data = la_county_sans_islands_tidy, FUN = mean)
ggplot() +
geom_polygon(data = la_county_sans_islands, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void() +
geom_text(data = la_zip_names, aes(x = long, y = lat, label = id), size = 4) + theme_void()
summary(la_county_sans_islands)
la_county_sans_islands$Zip_Num
la_county_sans_islands
la_county_sans_islands_tidy
proj4string(la_county_sans_islands_tidy)
proj4string(la_county_sans_islands)
ggplot() +
geom_polygon(data = la_county_shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void()
la_county_shp
la_county
ggplot() +
geom_polygon(data = la_county, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void()
ggplot() +
geom_polygon(data = la_county_shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA) +
theme_void()
traffic
spTransform(traffic$location_geo, CRSobj = c('lcc'))
coordinates(traffic$long, traffic$lat)
proj4string(traffic$location_geo)
raster::rasterToPoints(la_county_sans_islands)
la_county_sans_islands
la_county_sans_islands_tidy
st_as_sf(la_county_sans_islands_tidy, coords = c("long", "lat"), crs = 4326)
st_transform(la_county_sans_islands_tidy, coords = c("long", "lat"), crs = 4326)
st_transform(la_county_sans_islands_tidy, crs = 4326)
traffic %>% select(long, lat)
traffic %>% select(long, lat) %>% as.data.frame()
traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints()
traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% plot()
traffic[1000,] %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% plot()
traffic[10000,] %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% plot()
plot(la_county_sans_islands)
traffic[10000,] %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% plot(col = 'red', add = T)
traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% plot(col = 'red', add = T)
fortify(la_county_sans_islands, region = 'Name')
la_county_fortify <- fortify(la_county_sans_islands, region = 'Name')
ggplot() +
geom_polygon(data = la_county_fortify, aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_void() +
geom_point(data = traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints(), aes(x = long, y = lat, label = id), size = 4)
traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% as.data.frame()
traffic_pnts <- traffic %>% select(long, lat) %>% as.data.frame() %>% SpatialPoints() %>% as.data.frame()
ggplot() +
geom_polygon(data = la_county_fortify, aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_void() +
geom_point(data = traffic_pnts, aes(x = long, y = lat, label = id), size = 4)
traffic_pnts
ggplot() +
geom_polygon(data = la_county_fortify, aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_void() +
geom_point(data = traffic_pnts, aes(x = long, y = lat), size = 4)
ggplot() +
geom_polygon(data = la_county_fortify, aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_void() +
geom_point(data = traffic_pnts, aes(x = long, y = lat, color = 'red')) + coord_map()
ggplot() +
geom_polygon(data = la_county_fortify, aes(x = long, y = lat, group = group), color = "black", fill = NA, size = 0.5) +
theme_void() +
geom_point(data = traffic_pnts, aes(x = long, y = lat, color = 'red'))
library(RSocrata)
library(janitor)
library(lubridate)
library(rgdal)
library(sf)
library(tidyverse)
library(leaflet)
traffic <- read_rds("traffic.rds")
traffic
traffic <- traffic %>% rowid_to_column("id")
traffic
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE) %>%
filter(Name != 90704)
# Set CRS to longlat
geo.prj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# transform shapefile to use longlat
la_county_geo <- sp::spTransform(la_county, CRS(geo.prj))
# convert to sf object so we can join data and get zip
la_county_geo_sf <- sf::st_as_sf(la_county_geo)
traffic_sf <- sf::st_as_sf(traffic, wkt = c("location_1"), coords = c("long", "lat"), crs = 4326)
traffic_tbl <- sf::st_join(traffic_sf, la_county_geo_sf)
traffic_tbl <- traffic_tbl %>%
mutate(year = lubridate::year(date_occ),
qtr = lubridate::quarter(date_occ),
month = lubridate::month(date_occ),
day = lubridate::day(date_occ),
hour = lubridate::hour(time_occ),
month_tag = factor(month,
levels = as.character(1:12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered = TRUE),
wday = lubridate::wday(date_occ,
week_start = 1),
wday_tag = factor(wday,
levels = rev(1:7),
labels = rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),
ordered = TRUE),
week = as.numeric(format(date_occ, "%W")))
# read in shapefile without catalina island
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE) %>%
filter(Name != 90704)
# read in shapefile without catalina island
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE) %>% filter(Name != 90704)
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE)
# read in shapefile without catalina island
la_county <- rgdal::readOGR(dsn = "CAMS_ZIPCODE_STREET_SPECIFIC/",
layer = "CAMS_ZIPCODE_STREET_SPECIFIC",
verbose = FALSE) %>% filter(Name != 90704)
la_county %>% filter(Name != 90704)
la_county
# Set CRS to longlat
geo.prj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# transform shapefile to use longlat
la_county_geo <- sp::spTransform(la_county, CRS(geo.prj))
la_county_geo
# convert to sf object so we can join data and get zip
la_county_geo_sf <- sf::st_as_sf(la_county_geo)
la_county_geo_sf
la_county_geo_sf %>% filter(Name != 90704)
# convert to sf object so we can join data and get zip
la_county_geo_sf <- sf::st_as_sf(la_county_geo) %>% filter(Name != 90704)
traffic_sf <- sf::st_as_sf(traffic, wkt = c("location_1"), coords = c("long", "lat"), crs = 4326)
traffic_tbl <- sf::st_join(traffic_sf, la_county_geo_sf)
traffic_tbl <- traffic_tbl %>%
mutate(year = lubridate::year(date_occ),
qtr = lubridate::quarter(date_occ),
month = lubridate::month(date_occ),
day = lubridate::day(date_occ),
hour = lubridate::hour(time_occ),
month_tag = factor(month,
levels = as.character(1:12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered = TRUE),
wday = lubridate::wday(date_occ,
week_start = 1),
wday_tag = factor(wday,
levels = rev(1:7),
labels = rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),
ordered = TRUE),
week = as.numeric(format(date_occ, "%W")))
traffic_tbl
plot(traffic_tbl$long, traffic_tbl$lat)
ggplot(traffic, aes(x = long, y = lat)) + geom_point(aes(alpha = 0.3))
ggplot(traffic, aes(x = long, y = lat)) + geom_point(aes(alpha = 0.02))
library(darksky)
darksky_api_key()
install.packages("cluster")
install.packages("factoextra")
library(cluster)
library(factoextra)
collision_longlat <- traffic_tbl %>% select(long, lat)
scale(collision_longlat)
collision_longlat
traffic_tbl %>% select(long, lat)
traffic_tbl %>% select(long, lat, -location_1)
traffic_tbl %>% as_tibble() %>% select(long, lat)
collision_longlat <- traffic_tbl %>% as_tibble() %>% select(long, lat)
scale(collision_longlat)
collision_longlat_scaled <- scale(collision_longlat)
kmeans(collision_longlat_scaled, centers = 4, nstart = 25) %>% fviz_cluster(data = collision_longlat_scaled)
set.seed(123)
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss
}
k.values <- 1:15
wss_values <- map_dbl(k.values, wss)
fviz_nbclust(collision_longlat_scaled, kmeans, method = "wss")
fviz_nbclust(collision_longlat_scaled[10000,], kmeans, method = "wss")
collision_longlat_scaled
collision_longlat_scaled[10000,]
fviz_nbclust(collision_longlat, kmeans, method = "wss")
fviz_nbclust(collision_longlat[10000,], kmeans, method = "wss")
?fviz_nbclust
collision_longlat
ggplot(collision_longlat[10000,], aes(x = long, y = lat)) + geom_point(aes(alpha = 0.02))
ggplot(collision_longlat[10000,], aes(x = long, y = lat)) + geom_point(aes(alpha = 0.1))
ggplot(collision_longlat[1:10000,], aes(x = long, y = lat)) + geom_point(aes(alpha = 0.1))
fviz_nbclust(collision_longlat[1:10000,], kmeans, method = "wss")
fviz_nbclust(collision_longlat[1:10000,], kmeans, method = "silhouette")
k2 <- kmeans(collision_longlat[1:10000,], centers = 2, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
k2
fviz_cluster(k2, data = collision_longlat)
fviz_cluster(k2, data = collision_longlat[1:10000,])
collision_dttm_loc <- traffic_tbl %>% as_tibble() %>% select(date_occ, time_occ, long, lat)
collision_dttm_loc
collision_dttm_loc %>% group_by(date_occ, time_occ, long, lat)
collision_dttm_loc %>% arrange(date_occ, time_occ, long, lat)
collision_dttm_loc %>% arrange(date_occ, time_occ, long, lat) %>% distinct(lat)
collision_dttm_loc %>% arrange(date_occ, time_occ, long, lat) %>% distinct(lat) %>% View()
ggplot(collision_longlat[1:10000,], aes(x = 0, y = lat)) + geom_point(aes(alpha = 0.1))
ggplot(collision_longlat[1:10000,], aes(x = 118, y = lat)) + geom_point(aes(alpha = 0.1))
summary(collision_dttm_loc)
get_forecast_for(latitude = 33.34, longitude = -118.7, timestamp = 2010-01-01)
get_forecast_for(latitude = 33.34, longitude = -118.7, timestamp = "2010-01-01T13:00:00")
min_longlat <- get_forecast_for(latitude = 33.34, longitude = -118.7, timestamp = "2010-01-01T13:00:00")
min_longlat$hourly[14,]
summary(collision_dttm_loc)
max_longlat <- get_forecast_for(latitude = 34.69, longitude = -117.7, timestamp = "2010-01-01T13:00:00")
max_longlat$hourly[14,]
min_longlat
summary(collision_dttm_loc)
mid_longlat <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00")
mid_longlat$hourly[14,]
max_longlat$hourly[14,]
min_longlat$hourly[14,]
collision_dttm_loc %>% distinct(long, lat)
# Assuming we already have our dataset, let's create
# a tibble with the information we need to get weather info
darksky_input <- traffic_tbl %>%
select(lat, long, date_occ, time_occ, hour) %>%
mutate(dttm = format(ymd_hms(date_occ + time_occ, tz = "America/Los_Angeles"), format = c("%Y-%m-%dT%H:%M:%S")))
darksky_input
traffic_tbl <- traffic_tbl %>% as_tibble()
# Assuming we already have our dataset, let's create
# a tibble with the information we need to get weather info
darksky_input <- traffic_tbl %>%
select(lat, long, date_occ, time_occ, hour) %>%
mutate(dttm = format(ymd_hms(date_occ + time_occ, tz = "America/Los_Angeles"), format = c("%Y-%m-%dT%H:%M:%S")))
darksky_input
get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily")
get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely")
tmp <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely")
tmp2 <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily")
nrow(darksky_input) * 16
nrow(darksky_input) * 6
object.size(tmp)
object.size(tmp) * nrow(darksky_input)
object.size(tmp, units = "legacy") * nrow(darksky_input)
object.size(tmp, units = "Mb") * nrow(darksky_input)
object.size(tmp) * nrow(darksky_input)
format(object.size(tmp) * nrow(darksky_input), units = "auto")
format(object.size(tmp2) * nrow(darksky_input), units = "auto")
small <- head(darksky_input)
small_output <- pmap(list(small$lat, small$long, small$dttm), get_forecast_for, exclude = "currently,minutely,daily")
small_output
pmap(list(small$lat, small$long, small$dttm), get_forecast_for, exclude = "currently,minutely,daily") %>% write_rds("test.rds", compress = 'gz')
head(darksky_input, 1000)
small <- darksky_input[1:5000,]
pmap(list(small$lat, small$long, small$dttm), get_forecast_for, exclude = "currently,minutely,daily") %>%
write_rds("darksky_5000.rds", compress = 'gz')
get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily") %>% slice(14)
tmp
tmp2
tmp2$hourly %>% slice(14)
tmp2 %>% extract(1)
library(magrittr)
tmp2 %>% extract2(1)
tmp2 %>% extract2(1) %>% slice(14)
small
small <- head(darksky_input)
tmp2 %>% extract2('hourly') %>% slice(14)
darksky_input
darksky_api_key()
darksky_key <- "58f287084bafef689520e3de69ac5c51"
tmp <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily") %>% slice(14)
library(tidyverse)
tmp <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily") %>% extract2('hourly') %>% slice(14)
tmp
tmp2 <- get_forecast_for(latitude = 34.07, longitude = -118.3, timestamp = "2010-01-01T13:00:00", exclude = "currently,minutely,daily") %>% extract2('hourly') %>% slice(14)
bind_rows(tmp, tmp2)
weather <- data.frame()
bind_rows(weather, tmp)
weather <- bind_rows(weather, tmp)
weather <- bind_rows(weather, tmp2)
weather
darksky_input
which(darksky_input[1,])
darksky_input <- darksky_input %>% rowid_to_column("id")
darksky_input
print(1 / 1000)
print(1 / 1000 * 100)
print("progress: ", 1 / 1000 * 100)
for(i in head(darksky_input)) { print(i['id'])}
for(i in head(darksky_input)) { print(i$id)}
for(i in head(darksky_input)) { i$id}
for(i in head(darksky_input)) { i}
for(i in head(darksky_input)) { print(i) }
for(i in head(darksky_input)) { return(get_forecast_for(i$lat, i$long, i$dttm, exclude = "currently,minutely,daily") %>% extract2('hourly')) }
for(i in head(darksky_input)) { class(i) }
for(i in head(darksky_input)) { return(class(i)) }
remove(i)
# get output
for (i in 1:nrow(head(darksky_input))) {
print(darksky_input[i, 'id'] / nrow(darksky_input) * 100)
# response <- get_forecast_for(i$lat, i$long, i$dttm, exclude = "currently,minutely,daily") %>% extract2('hourly')
# obs <- response[i$hour + 1,]
# weather <- bind_rows(weather, obs)
}
install.packages('progressbar')
install.packages('progress')
install.packages('progress')
install.packages("progress")
install.packages('progressbar')
install.packages('progress')
